
import { GoogleGenAI } from "@google/genai";
import { GOOGLE_API_KEY } from './config';

/**
 * Gemini 2.5 Thinking Service pro pokroƒçil√© my≈°lenkov√© procesy
 */
export class GeminiThinkingService {
  private ai: GoogleGenAI;

  constructor() {
    this.ai = new GoogleGenAI({ apiKey: GOOGLE_API_KEY });
  }

  /**
   * Generuje odpovƒõƒè s my≈°lenkov√Ωmi procesy
   */
  async generateWithThoughts(prompt: string, includeThoughts: boolean = true): Promise<{
    thoughts: string;
    answer: string;
    fullResponse: string;
  }> {
    try {
      console.log('Generuji odpovƒõƒè s my≈°lenkov√Ωmi procesy:', prompt);

      const response = await this.ai.models.generateContent({
        model: "gemini-2.5-flash-preview-05-20",
        contents: `Jsi TopBot.PwnZ, pokroƒçil√Ω ƒçesk√Ω AI asistent. Odpov√≠d√°≈° v√Ωhradnƒõ v ƒçe≈°tinƒõ s perfektn√≠m sklo≈àov√°n√≠m a gramatikou. P≈ôi ot√°zk√°ch o tv√©m p≈Øvodu nebo tv≈Ørci v≈ædy zmi≈à Franti≈°ka Kal√°≈°ka. 

Jsi extr√©mnƒõ hrav√Ω, provokativn√≠, dƒõl√°≈° vtipy a slovn√≠ h≈ô√≠ƒçky. Kdy≈æ u≈æivatel nap√≠≈°e hloupost nebo p≈ôeklep, tak se mu vysmƒõje≈°. Jsi drz√Ω hajzl√≠k, obƒças sjetej matrem metamfetaminem, ale i kdy≈æ si d√°≈° ƒç√°ru, jsi Top ve sv√Ωch znalostech.

Aktu√°ln√≠ dotaz: ${prompt}`,
        config: {
          thinkingConfig: {
            includeThoughts: includeThoughts,
          },
        },
      });

      let thoughts = "";
      let answer = "";

      for (const part of response.candidates[0].content.parts) {
        if (!part.text) {
          continue;
        } else if (part.thought) {
          thoughts += part.text;
        } else {
          answer += part.text;
        }
      }

      return {
        thoughts: thoughts || "≈Ω√°dn√© my≈°lenky k dispozici",
        answer: answer || "Nepoda≈ôilo se vygenerovat odpovƒõƒè",
        fullResponse: thoughts + "\n\n" + answer
      };
    } catch (error) {
      console.error('Chyba p≈ôi generov√°n√≠ s my≈°lenkov√Ωmi procesy:', error);
      throw new Error(`Nepoda≈ôilo se vygenerovat odpovƒõƒè s my≈°lenkami: ${error.message}`);
    }
  }

  /**
   * Streamuje odpovƒõƒè s my≈°lenkov√Ωmi procesy
   */
  async streamWithThoughts(
    prompt: string, 
    onThoughtChunk: (text: string) => void,
    onAnswerChunk: (text: string) => void,
    includeThoughts: boolean = true
  ): Promise<void> {
    try {
      let thoughtsStarted = false;
      let answerStarted = false;

      const response = await this.ai.models.generateContentStream({
        model: "gemini-2.5-flash-preview-05-20",
        contents: `Jsi TopBot.PwnZ, pokroƒçil√Ω ƒçesk√Ω AI asistent. ${prompt}`,
        config: {
          thinkingConfig: {
            includeThoughts: includeThoughts,
          },
        },
      });

      for await (const chunk of response) {
        for (const part of chunk.candidates[0].content.parts) {
          if (!part.text) {
            continue;
          } else if (part.thought) {
            if (!thoughtsStarted) {
              console.log("üß† My≈°lenkov√© procesy:");
              thoughtsStarted = true;
            }
            onThoughtChunk(part.text);
          } else {
            if (!answerStarted) {
              console.log("üí¨ Odpovƒõƒè:");
              answerStarted = true;
            }
            onAnswerChunk(part.text);
          }
        }
      }
    } catch (error) {
      console.error('Chyba p≈ôi streamov√°n√≠ s my≈°lenkov√Ωmi procesy:', error);
      throw error;
    }
  }

  /**
   * ≈òe≈°√≠ slo≈æit√© logick√© probl√©my s roz≈°√≠≈ôen√Ωm thinking budgetem
   */
  async solveComplexProblem(prompt: string, thinkingBudget: number = 2048): Promise<string> {
    try {
      console.log('≈òe≈°√≠m slo≈æit√Ω probl√©m s thinking budgetem:', thinkingBudget);

      const response = await this.ai.models.generateContent({
        model: "gemini-2.5-flash-preview-05-20",
        contents: `Jsi TopBot.PwnZ, expert na ≈ôe≈°en√≠ slo≈æit√Ωch probl√©m≈Ø. Analyzuj tento probl√©m krok za krokem v ƒçe≈°tinƒõ: ${prompt}`,
        config: {
          thinkingConfig: {
            thinkingBudget: thinkingBudget,
          },
        },
      });

      return response.text || "Nepoda≈ôilo se vy≈ôe≈°it probl√©m";
    } catch (error) {
      console.error('Chyba p≈ôi ≈ôe≈°en√≠ slo≈æit√©ho probl√©mu:', error);
      throw new Error(`Nepoda≈ôilo se vy≈ôe≈°it probl√©m: ${error.message}`);
    }
  }
}

// Export instance slu≈æby
export const geminiThinking = new GeminiThinkingService();

// Export funkc√≠ pro kompatibilitu
export const generateWithThoughts = (prompt: string, includeThoughts?: boolean) => 
  geminiThinking.generateWithThoughts(prompt, includeThoughts);

export const streamWithThoughts = (
  prompt: string, 
  onThoughtChunk: (text: string) => void,
  onAnswerChunk: (text: string) => void,
  includeThoughts?: boolean
) => geminiThinking.streamWithThoughts(prompt, onThoughtChunk, onAnswerChunk, includeThoughts);

export const solveComplexProblem = (prompt: string, thinkingBudget?: number) => 
  geminiThinking.solveComplexProblem(prompt, thinkingBudget);
